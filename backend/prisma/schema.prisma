// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  // binaryTargets = ["native", "debian-openssl-3.0.x", "darwin-arm64"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole{
  USER
  ADMIN
}
enum Difficulty{
  EASY
  MEDIUM
  HARD
}

model User{
  id String @id @default(uuid())
  name String
  email String @unique
  image String?
  password String
  role UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  problems Problem[]
  submissions Submission[]
  problemsSolved ProblemSolved[]
  playlists Playlist[]
}

model Problem{
  id String @id @default(uuid())
  title String
  description String
  difficulty Difficulty @default(EASY)
  tags String[]
  userId String
  examples Json
  constraints Json
  hints String?
  editorial String?

  testcases Json 
  codeSnippets Json
  referenceSolutions Json 
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Realtionship 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions Submission[]
  problemsSolvedBy ProblemSolved[]
  problemInPlaylists ProblemInPlaylist[]
}

model Submission{
  id String @id @default(uuid())
  problemId String
  userId String
  sourceCode Json
  language String
  stdin String?
  stdout String?
  stderr String?
  compiledOutput String?
  status String //Accepted , Wrrong Answer
  time String?
  memory String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testCases TestCaseResult[]
} 

model TestCaseResult {
  id String @id @default(uuid())
  submissionId String
  testCase Int
  passed Boolean
  input String
  stdout String?
  expected String?
  stderr String?
  compiledOutput String?
  status String 
  memory String?
  time String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  @@index([submissionId])
}
model ProblemSolved{
id String @id @default(uuid())
  userId String
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  @@unique([userId, problemId])

}

model Playlist{
  id String @id @default(uuid())
  name String
  description String?
  userId String
  problems ProblemInPlaylist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)  
  @@unique([name,userId])
} 

model ProblemInPlaylist{
  id String @id @default(uuid())
  playlistId String
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  @@unique([playlistId,problemId])
} 